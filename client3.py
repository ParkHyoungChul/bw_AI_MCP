import google.generativeai as genai
from google.generativeai import types
from google.generativeai import GenerativeModel, GenerationConfig, configure
from mcp import ClientSession, StdioServerParameters
from mcp.client.stdio import stdio_client
import json
import asyncio
import os
from dotenv import load_dotenv

load_dotenv()
configure(api_key="GEMINI_API_KEY")

current_dir = os.path.dirname(__file__)
config_path = os.path.join(current_dir, "mcp_server_config.json")

with open(config_path, "r", encoding="utf-8") as f:
    config = json.load(f)["mcpServers"]["py-mcp-naver-search"]
    
server_params = StdioServerParameters(
    command=config["command"], 
    args=config["args"], 
    env=None
)

async def run():
    async with stdio_client(server_params) as (read, write):
        async with ClientSession(read, write) as session:
            await session.initialize()

            tools_info = await session.list_tools()
        
            def clean_schema(schema):
                if isinstance(schema, dict):
                    cleaned = {}

                    for k, v in schema.items():
                        if k in ["title", "default", "examples", "description", "$schema", "nullable"]:
                            continue
                        if k == "required":
                            cleaned[k] = v
                        else:
                            cleaned[k] = clean_schema(v)

                    return cleaned
                elif isinstance(schema, list):
                    return [clean_schema(item) for item in schema]
                else:
                    return schema
            tools = [
                    types.Tool(
                        function_declarations=[
                            {
                                "name": tool.name,
                                "description": tool.description,
                                "parameters": clean_schema(tool.inputSchema)
                            }
                        ]
                    )
                    for tool in tools_info.tools
                ]

            prompt = f"네이버 블로그 검색 툴을 사용해서 고기를 검색해서 결과 요약해줘, 첫번째 페이지만 정렬방식은 기본으로"

            model = GenerativeModel(
                model_name="gemini-2.0-flash-lite",
                tools=tools,  # MCP에서 변환한 function_declarations list
                generation_config=GenerationConfig(
                    temperature=0,
                ),
            )
            response = model.generate_content(prompt)

            parts = response.candidates[0].content.parts

            # function_call 먼저 찾아봅니다
            function_call = None
            for part in parts:
                if hasattr(part, "function_call") and part.function_call:
                    function_call = part.function_call
                    break

            # function_call 이 있으면 MCP tool 호출
            if function_call:
                result = await session.call_tool(
                    function_call.name, arguments=dict(function_call.args)
                )

                print("--- Formatted Result ---") 

                try:
                    response_text = result.content[0].text  # MCP에서 받은 원본 텍스트

                    # 먼저 json 파싱 시도
                    try:
                        search_result = json.loads(response_text)
                        print(json.dumps(search_result, indent=2))
                    except json.JSONDecodeError:
                        # json 파싱 실패시 일반 텍스트 출력
                        print("MCP server returned non-JSON response:")
                        print(response_text)

                except (IndexError, AttributeError):
                    print("Unexpected result structure from MCP server:")
                    print(result)

            # function_call이 생성되지 않은 경우
            else:
                print("No function call was generated by the model.")
                
                for part in parts:
                    if hasattr(part, "text") and part.text:
                        print("Model response:")
                        print(part.text)

asyncio.run(run())
